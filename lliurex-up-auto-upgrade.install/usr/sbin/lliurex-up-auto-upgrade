#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import subprocess
import sys
import n4d.client as n4dclient
import ssl
import time
import random
import datetime
import json


class LlxUpAutoUpgrade():

	def __init__(self):

		self.adiInterval=900
		self.adiDelay=600
		self.desktopADIDelay=2700
		self.desktopInterval=3600
		self.desktopDelay=600
		self.tokenPath="/var/run/lliurex-up-auto-upgrade.token"
		self.lockPath="/var/run/lliurex-up-auto-upgrade.lock"
		self.lliurexUpAutoControlFile="/etc/lliurex-up-auto-upgrade/lliurex-up-auto-upgrade.json"
		self.launchUpgrade()

	#def __init__ 	


	def launchUpgrade(self):

		self._cleanEnvironment()
		
		if self._canLaunchUpgrade():
			self._getDelayTime()
			currentTime=datetime.datetime.now()
			waitTime1=random.randint(self.delay,self.startInterval)
			#waitTime2=random.randint(0,self.endInterval)
			#sleepTime=waitTime1+waitTime2
			sleepTime=waitTime1
			updateTime=currentTime+datetime.timedelta(seconds=sleepTime)
			formatTime=updateTime.strftime("%H:%M:%S")
			with open(self.tokenPath,'w') as fd:
				fd.write(str(formatTime))
			
			time.sleep(sleepTime)

			with open(self.lockPath,'w') as fd:
				fd.close()

			cmd="lliurex-upgrade -u"
			try:
				p=subprocess.run(cmd,shell=True,check=True)
			except subprocess.CalledProcessError as e:
				pass
			
			self._cleanEnvironment()

	#def launchUpgrade

	def _getDelayTime(self):

		adi=False
		desktop=False

		cmd='lliurex-version -v'
		p=subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE)
		result=p.communicate()[0]
		
		if type(result) is bytes:
			result=result.decode()
		flavours = [ x.strip() for x in result.split(',') ]	
		
		for item in flavours:
			if 'adi' in item:
				adi=True
				desktop=False
				break
			elif 'desktop' in item:
				desktop=True


		if adi:
			self.startInterval=self.adiInterval
			self.endInterval=self.adiDelay
			self.delay=self.adiDelay
		else:
			if desktop:
				if self._checkIsConnectionWithADI():
					self.startInterval=self.desktopInterval
					self.delay=self.desktopADIDelay
				else:
					self.startInterval=self.desktopInterval
					self.delay=self.desktopDelay
			else:
				self.startInterval=self.desktopInterval
				self.delay=self.desktopDelay

	#def _getLockFlavour

	def _checkIsConnectionWithADI(self):

		try:
			client=n4dclient.Client('https://localhost:9779')
			test=client.get_variable('EPOPTES_SERVER')
			return True
		except Exception as e:
			return False

	#def _checkIsConnectionWithADI

	def _cleanEnvironment(self):

		if os.path.exists(self.lockPath):
			os.remove(self.lockPath)

		if os.path.exists(self.tokenPath):
			os.remove(self.tokenPath)

	#def _cleanEnvironment

	def _canLaunchUpgrade(self):

		if os.path.exists(self.lliurexUpAutoControlFile):
			try:
				with open(self.lliurexUpAutoControlFile,'r') as fd:
					currentContent=json.load(fd)
				today=datetime.date.today()
				today=today.isoformat()
				if today<currentContent["dateToUpdate"]:
					return False
			except:
				pass

		return True

	#def _canLaunchUpgrade

#def LlxUpAutoUpgrade

llxupAutoUpgrade=LlxUpAutoUpgrade()		

