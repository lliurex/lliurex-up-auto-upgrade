#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import subprocess
import sys
import xmlrpc.client as n4dclient
import ssl
import time
import random
import datetime
import json


class LlxUpAutoUpgrade():

	def __init__(self):

		self.interval=1800
		self.tokenPath="/var/run/lliurex-up-auto-upgrade.token"
		self.lockPath="/var/run/lliurex-up-auto-upgrade.lock"
		self.lliurexUpAutoControlFile="/etc/lliurex-up-auto-upgrade/lliurex-up-auto-upgrade.json"
		self.context=ssl._create_unverified_context()
		self.natFreeClientPath="/usr/bin/natfree-client"
		self.isADI=False
		self.canConnectWithADI=False
		self.adiInterval=900
		self.deskopInterval=3600
		self.delay=300
		self._debug=False
		self.versionReference=["adi","desktop"]

		self.launchUpgrade()

	#def __init__ 	


	def launchUpgrade(self):

		self._cleanEnvironment()
		abort=False
		time.sleep(300)

		if self._canLaunchUpgrade():
			self._getFlavour()
			if not self.isADI:
				if self.canConnectWithADI:
					if self._checkIfMirrorExists():
						ret=self._isMirrorRunning()
						if ret:
							abort=True
		else:
			abort=True

		if not abort:
			msg="launchUpgrade: ready to continue"
			self._showDebug(msg)
			self._getDelayTime()
			currentTime=datetime.datetime.now()
			sleepTime=random.randint(self.delay,self.interval)
			updateTime=currentTime+datetime.timedelta(seconds=sleepTime)
			formatTime=updateTime.strftime("%H:%M:%S")
			with open(self.tokenPath,'w') as fd:
				fd.write(str(formatTime))
			
			msg="launchUpgrade: Update sheduled for: %s"%str(formatTime)
			self._showDebug(msg)
			time.sleep(sleepTime)

			with open(self.lockPath,'w') as fd:
				fd.close()

			cmd="lliurex-upgrade -u"
			try:
				p=subprocess.run(cmd,shell=True,check=True)
			except subprocess.CalledProcessError as e:
				msg="launchUpgrade: Error: %s"%str(e)
				pass
			
			self._cleanEnvironment()

	#def launchUpgrade

	def _getFlavour(self):

		cmd='lliurex-version -v'
		p=subprocess.Popen(cmd,shell=True,stdout=subprocess.PIPE)
		result=p.communicate()[0]

		if type(result) is bytes:
			result=result.decode()

		for x in result.split(","):
			if x.strip() in self.versionReference:
				flavours.append(x.strip())
		
		for item in flavours:
			if 'adi' in item:
				self.isADI=True
				break
					
		if not self.isADI:
			if os.path.exists(self.natFreeClientPath):
				if self._checkIsConnectionWithServerADI():
					self.canConnectWithADI=True

	#def _getFlavour

	def _checkIsConnectionWithServerADI(self):

		try:
			self.client=n4dclient.ServerProxy("https://server:9779",context=self.context,allow_none=True)
			test=self.client.is_alive('','MirrorManager')
			msg="_checkIsConnectionWithServerADI: True"
			self._showDebug(msg)
			return True
		except Exception as e:
			msg="_checkIsConnectionWithServerADI: False : %s"%str(e)
			self._showDebug(msg)
			return False

	#def _checkIsConnectionWithServerADI

	def _getDelayTime(self):

		if self.isADI:
			self.interval=self.adiInterval
		else:
			self.interval=self.deskopInterval
			
	#def _getDelayTime

	def _cleanEnvironment(self):

		if os.path.exists(self.lockPath):
			os.remove(self.lockPath)

		if os.path.exists(self.tokenPath):
			os.remove(self.tokenPath)

	#def _cleanEnvironment

	def _canLaunchUpgrade(self):

		if os.path.exists(self.lliurexUpAutoControlFile):
			try:
				with open(self.lliurexUpAutoControlFile,'r') as fd:
					currentContent=json.load(fd)
				today=datetime.date.today()
				today=today.isoformat()
				if today<currentContent["dateToUpdate"]:
					msg="_canLaunchUpgrade: False"
					self._showDebug(msg)
					return False
			except:
				pass

		msg="_canLaunchUpgrade:True"
		self._showDebug(msg)
		
		return True

	#def _canLaunchUpgrade

	def _checkIfMirrorExists(self):

		try:
			test=self.client.is_mirror_available('','MirrorManager')
			if test['status']==0:
				msg="_checkIfMirrorExists: ADI has mirror"
				self._showDebug(msg)
				return True
			else:
				msg="_checkIfMirrorExists: ADI does not have mirror"
				self._showDebug(msg)
				return False
		except Exception as e:
			msg="_checkIfMirrorExists: Error: %s"%str(e)
			return False

	#def _checkIfMirrorExists

	def _isMirrorRunning(self):

		maxAttemps=3
		attemps=0
		ret=True

		while attemps<maxAttemps:
			time.sleep(300)
			try:
				test=self.client.is_alive('','MirrorManager')['return']['status']
				if test:
					msg="_isMirrorRunning: ADI mirror is bein updated"
					self._showDebug(msg)
					attemps=+1
				else:
					msg="_isMirrorRunning: ADI mirror is ready to use"
					ret=False
					self._showDebug(msg)
					break
			except Exception as e:
				msg="_isMirrorRunning: Error:%s"%str(e)
				self._showDebug(msg)
				break

		return ret

	#def _isMirrorRunning

	def _showDebug(self,msg):

		if self._debug:
			print("[LliureX-Up-Auto-Upgrade]: %s"%str(msg))

	#def _showDebug

#def LlxUpAutoUpgrade

llxupAutoUpgrade=LlxUpAutoUpgrade()		

